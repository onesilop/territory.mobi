// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using territory.mobi.Models;

namespace territory.mobi.Migrations
{
    [DbContext(typeof(TerritoryContext))]
    partial class TerritoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("territory.mobi.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers","dbo");
                });

            modelBuilder.Entity("territory.mobi.Models.Cong", b =>
                {
                    b.Property<Guid>("CongId")
                        .HasColumnName("CongID");

                    b.Property<string>("CongName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ServId")
                        .HasColumnName("ServID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDatetime")
                        .HasColumnType("datetime");

                    b.HasKey("CongId");

                    b.ToTable("Cong");
                });

            modelBuilder.Entity("territory.mobi.Models.Dncpword", b =>
                {
                    b.Property<Guid>("PwdId")
                        .HasColumnName("pwdID");

                    b.Property<Guid>("CongId")
                        .HasColumnName("congID");

                    b.Property<int>("Notinuse")
                        .HasColumnName("notinuse");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordHash")
                        .IsUnicode(false);

                    b.HasKey("PwdId");

                    b.ToTable("dncpword");
                });

            modelBuilder.Entity("territory.mobi.Models.DoNotCall", b =>
                {
                    b.Property<Guid>("DncId")
                        .HasColumnName("dncID");

                    b.Property<string>("AptNo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("dateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateValidated")
                        .HasColumnName("dateValidated")
                        .HasColumnType("datetime");

                    b.Property<bool>("Display")
                        .HasColumnName("display");

                    b.Property<string>("Geocode")
                        .HasColumnName("geocode")
                        .IsUnicode(false);

                    b.Property<Guid>("MapId")
                        .HasColumnName("mapID");

                    b.Property<string>("Note")
                        .IsUnicode(false);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnName("streetName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("StreetNo")
                        .IsRequired()
                        .HasColumnName("streetNo")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDatetime")
                        .HasColumnName("updateDatetime")
                        .HasColumnType("datetime");

                    b.HasKey("DncId")
                        .HasName("PK_doNotCall");

                    b.HasIndex("MapId");

                    b.ToTable("DoNotCall");
                });

            modelBuilder.Entity("territory.mobi.Models.Images", b =>
                {
                    b.Property<Guid>("ImgId")
                        .HasColumnName("imgID");

                    b.Property<byte[]>("ImgImage")
                        .HasColumnName("imgImage")
                        .HasColumnType("image");

                    b.Property<string>("ImgPath")
                        .HasColumnName("imgPath")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ImgText")
                        .IsRequired()
                        .HasColumnName("imgText")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<Guid?>("MapId")
                        .HasColumnName("mapID");

                    b.Property<DateTime?>("Updatedatetime")
                        .HasColumnName("updatedatetime")
                        .HasColumnType("datetime");

                    b.HasKey("ImgId");

                    b.HasIndex("MapId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("territory.mobi.Models.Map", b =>
                {
                    b.Property<Guid>("MapId")
                        .HasColumnName("MapID");

                    b.Property<Guid>("CongId")
                        .HasColumnName("CongID");

                    b.Property<bool>("Display");

                    b.Property<string>("GoogleRef")
                        .IsUnicode(false);

                    b.Property<Guid?>("ImgId")
                        .HasColumnName("imgID");

                    b.Property<string>("MapArea")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MapDesc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MapKey")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("MapPolygon")
                        .IsUnicode(false);

                    b.Property<string>("MapType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .IsUnicode(false);

                    b.Property<string>("Parking")
                        .IsUnicode(false);

                    b.Property<Guid?>("SectionId")
                        .HasColumnName("SectionID");

                    b.Property<int>("SortOrder");

                    b.Property<DateTime>("UpdateDatetime")
                        .HasColumnType("datetime");

                    b.HasKey("MapId");

                    b.HasIndex("SectionId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("territory.mobi.Models.MapAssignment", b =>
                {
                    b.Property<Guid>("AssignId")
                        .HasColumnName("assignId");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnName("dateAssigned")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnName("dateReturned")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MapId")
                        .HasColumnName("mapId");

                    b.Property<string>("NonUserName")
                        .HasColumnName("nonUserName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("Updatedatetime")
                        .HasColumnName("updatedatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("AssignId")
                        .HasName("PK_mapAssignment");

                    b.ToTable("MapAssignment");
                });

            modelBuilder.Entity("territory.mobi.Models.MapFeature", b =>
                {
                    b.Property<Guid>("MapFeatureId");

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("MapId");

                    b.Property<decimal?>("Opacity");

                    b.Property<string>("Position")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Updatedatetime")
                        .HasColumnName("updatedatetime")
                        .HasColumnType("datetime");

                    b.Property<int>("ZIndex")
                        .HasColumnName("zIndex");

                    b.Property<int>("Zoom")
                        .HasColumnName("zoom");

                    b.HasKey("MapFeatureId");

                    b.ToTable("MapFeature");
                });

            modelBuilder.Entity("territory.mobi.Models.PageHelpText", b =>
                {
                    b.Property<string>("PageId")
                        .HasColumnName("pageId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SectionId")
                        .HasColumnName("sectionID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HtmlHelp")
                        .IsRequired()
                        .HasColumnName("htmlHelp");

                    b.HasKey("PageId", "SectionId")
                        .HasName("PK_pageHelp");

                    b.ToTable("pageHelp");
                });

            modelBuilder.Entity("territory.mobi.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId");

                    b.Property<Guid>("CongId")
                        .HasColumnName("CongID");

                    b.Property<string>("SectionTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SortOrder")
                        .HasColumnName("SortOrder");

                    b.HasKey("SectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("territory.mobi.Models.Setting", b =>
                {
                    b.Property<Guid>("SettingId");

                    b.Property<Guid?>("CongId");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("SettingId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("territory.mobi.Models.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnName("tokenId");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnName("updateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCong")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("TokenId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("territory.mobi.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("territory.mobi.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("territory.mobi.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("territory.mobi.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("territory.mobi.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("territory.mobi.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("territory.mobi.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("territory.mobi.Models.DoNotCall", b =>
                {
                    b.HasOne("territory.mobi.Models.Map", "Map")
                        .WithMany("DoNotCall")
                        .HasForeignKey("MapId")
                        .HasConstraintName("FK_DoNotCall_Map");
                });

            modelBuilder.Entity("territory.mobi.Models.Images", b =>
                {
                    b.HasOne("territory.mobi.Models.Map", "Map")
                        .WithMany("Images")
                        .HasForeignKey("MapId")
                        .HasConstraintName("FK_images_Map");
                });

            modelBuilder.Entity("territory.mobi.Models.Map", b =>
                {
                    b.HasOne("territory.mobi.Models.Section")
                        .WithMany("Maps")
                        .HasForeignKey("SectionId");
                });
#pragma warning restore 612, 618
        }
    }
}
